namespace ScraperBackendService.Configuration;/// <summary>/// Backend service configuration settings./// Defines server hosting options, authentication, and operational parameters./// </summary>/// <example>/// Usage in appsettings.json:/// {///   "ServiceConfig": {///     "Port": 8585,///     "Host": "0.0.0.0",///     "AuthToken": "your-secure-token",///     "HanimeMaxConcurrentRequests": 5,///     "DlsiteMaxConcurrentRequests": 5,///     "RequestTimeoutSeconds": 120,///     "ChallengeAutoWaitSeconds": 15,///     "ChallengeAutoWaitSlowSeconds": 30,///     "HanimeRateLimitSeconds": 30,///     "DlsiteRateLimitSeconds": 30///   }/// }////// Usage in code:/// var config = Configuration.GetSection(ServiceConfiguration.SectionName).Get&lt;ServiceConfiguration&gt;();/// Console.WriteLine($"Server will listen on {config.Host}:{config.Port}");/// </example>public sealed class ServiceConfiguration{    /// <summary>    /// Configuration section name in appsettings.json.    /// </summary>    public const string SectionName = "ServiceConfig";    /// <summary>    /// Service listening port. Default is 8585.    /// </summary>    /// <example>    /// // Listen on custom port    /// Port = 9090;    ///    /// // Use default port    /// Port = 8585;    /// </example>    public int Port { get; set; } = 8585;    /// <summary>    /// Service listening address. Default is 0.0.0.0 (all interfaces).    /// </summary>    /// <example>    /// // Listen on all interfaces (default)    /// Host = "0.0.0.0";    ///    /// // Listen on localhost only    /// Host = "127.0.0.1";    ///    /// // Listen on specific interface    /// Host = "192.168.1.100";    /// </example>    public string Host { get; set; } = "0.0.0.0";    /// <summary>    /// Optional authentication token. If empty, authentication is disabled.    /// When set, clients must include this token in request headers.    /// </summary>    /// <example>    /// // Disable authentication    /// AuthToken = null;    ///    /// // Enable token-based authentication    /// AuthToken = "my-secret-api-token-123";    ///    /// // Client usage:    /// httpClient.DefaultRequestHeaders.Add("X-API-Token", "my-secret-api-token-123");    /// </example>    public string? AuthToken { get; set; }    /// <summary>    /// Token verification header name. Default is "X-API-Token".    /// Specifies which HTTP header contains the authentication token.    /// </summary>    /// <example>    /// // Use default header    /// TokenHeaderName = "X-API-Token";    ///    /// // Use custom header    /// TokenHeaderName = "Authorization";    ///    /// // Client usage:    /// httpClient.DefaultRequestHeaders.Add(config.TokenHeaderName, token);    /// </example>    public string TokenHeaderName { get; set; } = "X-API-Token";    /// <summary>    /// Request timeout duration in seconds. Default is 60 seconds.    /// Applied to both HTTP requests and scraping operations.    /// </summary>    /// <example>    /// // Quick timeout for fast responses    /// RequestTimeoutSeconds = 30;    ///    /// // Extended timeout for complex scraping    /// RequestTimeoutSeconds = 180;    ///    /// // Default timeout    /// RequestTimeoutSeconds = 60;    /// </example>    public int RequestTimeoutSeconds { get; set; } = 60;    /// <summary>    /// Provider-specific limit for Hanime concurrent requests.    /// Controls the maximum number of simultaneous requests to Hanime website.    /// </summary>    /// <example>    /// // Conservative setting for shared hosting    /// HanimeMaxConcurrentRequests = 3;    ///    /// // Aggressive setting for dedicated server    /// HanimeMaxConcurrentRequests = 10;    ///    /// // Default setting    /// HanimeMaxConcurrentRequests = 5;    /// </example>    public int HanimeMaxConcurrentRequests { get; set; } = 5;    /// <summary>    /// Provider-specific limit for DLsite concurrent requests.    /// Controls the maximum number of simultaneous requests to DLsite website.    /// </summary>    /// <example>    /// // Conservative setting for shared hosting    /// DlsiteMaxConcurrentRequests = 3;    ///    /// // Aggressive setting for dedicated server    /// DlsiteMaxConcurrentRequests = 10;    ///    /// // Default setting    /// DlsiteMaxConcurrentRequests = 5;    /// </example>    public int DlsiteMaxConcurrentRequests { get; set; } = 5;    /// <summary>    /// Whether to enable aggressive memory optimization including frequent garbage collection.    /// When enabled, triggers more frequent GC to prevent memory buildup at the cost of some performance.    /// </summary>    /// <example>    /// // Enable for memory-constrained environments    /// EnableAggressiveMemoryOptimization = true;    ///    /// // Disable for high-performance scenarios (default)    /// EnableAggressiveMemoryOptimization = false;    /// </example>    public bool EnableAggressiveMemoryOptimization { get; set; } = false;    /// <summary>    /// How long to wait for challenge auto-resolution on primary attempts (seconds).    /// When anti-bot challenges are detected, the system will wait this long for automatic resolution.    /// </summary>    /// <example>    /// // Quick resolution attempt    /// ChallengeAutoWaitSeconds = 10;    ///    /// // Standard wait time (default)    /// ChallengeAutoWaitSeconds = 15;    ///    /// // Extended wait for stubborn challenges    /// ChallengeAutoWaitSeconds = 25;    /// </example>    public int ChallengeAutoWaitSeconds { get; set; } = 15;    /// <summary>    /// How long to wait for challenge auto-resolution on slow retry attempts (seconds).    /// When primary attempts fail and slow retry is triggered, this longer wait time is used.    /// </summary>    /// <example>    /// // Conservative slow retry    /// ChallengeAutoWaitSlowSeconds = 20;    ///    /// // Standard slow retry (default)    /// ChallengeAutoWaitSlowSeconds = 30;    ///    /// // Extended slow retry for difficult challenges    /// ChallengeAutoWaitSlowSeconds = 45;    /// </example>    public int ChallengeAutoWaitSlowSeconds { get; set; } = 30;    /// <summary>    /// Minimum time interval in seconds between consecutive cache-miss requests for each Hanime concurrency slot.    /// Each slot has its own independent timer. When a request hits the cache, no rate limiting is applied.    /// Set to 0 to disable rate limiting. Default is 30 seconds.    /// </summary>    /// <example>    /// // Disable rate limiting    /// HanimeRateLimitSeconds = 0;    ///    /// // Conservative rate limiting (default)    /// HanimeRateLimitSeconds = 30;    ///    /// // Aggressive rate limiting    /// HanimeRateLimitSeconds = 60;    /// </example>    public int HanimeRateLimitSeconds { get; set; } = 30;    /// <summary>    /// Minimum time interval in seconds between consecutive cache-miss requests for each DLsite concurrency slot.    /// Each slot has its own independent timer. When a request hits the cache, no rate limiting is applied.    /// Set to 0 to disable rate limiting. Default is 30 seconds.    /// </summary>    /// <example>    /// // Disable rate limiting    /// DlsiteRateLimitSeconds = 0;    ///    /// // Conservative rate limiting (default)    /// DlsiteRateLimitSeconds = 30;    ///    /// // Aggressive rate limiting    /// DlsiteRateLimitSeconds = 60;    /// </example>    public int DlsiteRateLimitSeconds { get; set; } = 30;}