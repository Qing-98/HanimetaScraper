using HtmlAgilityPack;using ScraperBackendService.Core.Normalize;using ScraperBackendService.Core.Util;using ScraperBackendService.Models;namespace ScraperBackendService.Core.Parsing;/// <summary>/// Personnel extraction utilities for parsing staff information from content pages./// Provides specialized methods for extracting, mapping, and normalizing personnel data/// from various content provider formats, particularly DLsite's Japanese role structures./// </summary>/// <remarks>/// This class handles:/// - Japanese to English role mapping for standardization/// - Automatic deduplication of personnel entries/// - Structured personnel data extraction from HTML tables/// - Support for complex role hierarchies and multiple names per role/// </remarks>/// <example>/// Usage examples:////// // Extract all personnel from DLsite page/// PeopleEx.ExtractDLsitePersonnel(htmlDocument, metadata);////// // Add individual person with automatic role mapping/// PeopleEx.AddPersonWithOriginalRole(metadata, "山田太郎", "声優");////// // Manual role mapping for custom processing/// var (englishType, role) = PeopleEx.MapStaffRole("監督");/// // Returns: ("Director", null)////// // Check extracted personnel/// Console.WriteLine($"Found {metadata.People.Count} personnel entries:");/// foreach (var person in metadata.People)/// {///     Console.WriteLine($"{person.Name} - {person.Type} ({person.Role})");/// }/// </example>public static class PeopleEx{    /// <summary>    /// Maps Japanese role names to standardized English types for international compatibility.    /// Uses ScrapingUtils.MapStaffRole for consistent role normalization across the application.    /// </summary>    /// <param name="header">Japanese role name (e.g., "声優", "監督", "シナリオ")</param>    /// <returns>Tuple containing normalized English type and optional role detail</returns>    /// <remarks>    /// This method provides standardized mapping for common Japanese content roles:    /// - Voice acting roles: "声優" → "Actor"    /// - Direction roles: "監督" → "Director"    /// - Writing roles: "シナリオ" → "Writer"    /// - Production roles: "プロデューサー" → "Producer"    /// - Art roles: "キャラクターデザイン" → "Artist"    /// </remarks>    /// <example>    /// var (type, role) = MapStaffRole("声優");    /// // Returns: ("Actor", null)    ///    /// var (type2, role2) = MapStaffRole("監督");    /// // Returns: ("Director", null)    ///    /// var (type3, role3) = MapStaffRole("シナリオ");    /// // Returns: ("Writer", null)    ///    /// var (type4, role4) = MapStaffRole("音響監督");    /// // Returns: ("Director", null) - specialized director role    ///    /// var (type5, role5) = MapStaffRole("UnrecognizedRole");    /// // Returns: ("UnrecognizedRole", null) - no mapping available    /// </example>    public static (string Type, string? Role) MapStaffRole(string header)        => ScrapingUtils.MapStaffRole(header);    /// <summary>    /// Adds a person to metadata with automatic deduplication and role preservation.    /// Stores both normalized English type for Jellyfin compatibility and original role for reference.    /// </summary>    /// <param name="meta">Metadata object to add person to</param>    /// <param name="name">Person's name in original language</param>    /// <param name="type">Normalized English role type (Actor, Director, Writer, etc.)</param>    /// <param name="originalRole">Original role name in source language for reference</param>    /// <remarks>    /// This method:    /// - Automatically deduplicates entries based on name and type combination    /// - Preserves original role names for cultural context and debugging    /// - Uses standardized English types for Jellyfin plugin compatibility    /// - Handles null and empty values gracefully    /// </remarks>    /// <example>    /// // Add voice actor with original Japanese role preserved    /// AddPerson(metadata, "田中花音", "Actor", "声優");    ///    /// // Add director with original role preserved    /// AddPerson(metadata, "佐藤一郎", "Director", "監督");    ///    /// // Add writer with specific role detail    /// AddPerson(metadata, "鈴木次郎", "Writer", "シナリオ");    ///    /// // Add composer with original role    /// AddPerson(metadata, "音楽家", "Composer", "音楽");    ///    /// // Duplicate entries are automatically handled    /// AddPerson(metadata, "田中花音", "Actor", "声優"); // Will be deduplicated    /// </example>    public static void AddPerson(Metadata meta, string name, string type, string? originalRole)        => ScrapingUtils.AddPerson(meta, name, type, originalRole);    /// <summary>    /// Extracts comprehensive personnel information from DLsite work_outline table structure.    /// Scans table rows for personnel-related roles and extracts associated names with proper mapping.    /// Only processes roles that can be mapped to standardized English types for consistency.    /// </summary>    /// <param name="doc">HTML document containing the DLsite page with work_outline table</param>    /// <param name="meta">Metadata object to populate with personnel information</param>    /// <remarks>    /// This method implements DLsite-specific personnel extraction:    /// 1. Scans all rows in the work_outline table for role headers    /// 2. Identifies personnel roles using MapStaffRole validation    /// 3. Extracts person names from links or cell text    /// 4. Handles multiple names per role (common in Japanese productions)    /// 5. Applies automatic role mapping and deduplication    /// 6. Preserves original Japanese role names for reference    ///     /// Common DLsite personnel roles handled:    /// - 声優 (Voice Actor) → Actor    /// - 監督 (Director) → Director    /// - シナリオ (Scenario) → Writer    /// - 音楽 (Music) → Composer    /// - キャラクターデザイン (Character Design) → Artist    /// </remarks>    /// <example>    /// var doc = new HtmlDocument();    /// doc.LoadHtml(dlsitePageHtml);    /// var metadata = new Metadata();    ///    /// ExtractDLsitePersonnel(doc, metadata);    ///    /// // Results in metadata.People containing extracted personnel:    /// // Example output:    /// // - Name: "田中花音", Type: "Actor", Role: "声優"    /// // - Name: "佐藤監督", Type: "Director", Role: "監督"    /// // - Name: "脚本家", Type: "Writer", Role: "シナリオ"    ///    /// Console.WriteLine($"Found {metadata.People.Count} personnel entries:");    /// foreach (var person in metadata.People)    /// {    ///     Console.WriteLine($"{person.Name} - {person.Type}");    ///     if (!string.IsNullOrEmpty(person.Role))    ///         Console.WriteLine($"  Original Role: {person.Role}");    /// }    ///    /// // Verify role distribution    /// var roleGroups = metadata.People.GroupBy(p => p.Type);    /// foreach (var group in roleGroups)    /// {    ///     Console.WriteLine($"{group.Key}: {group.Count()} people");    /// }    /// </example>    public static void ExtractDLsitePersonnel(HtmlDocument doc, Metadata meta)    {        // Iterate through all rows in the work_outline table        var rows = doc.DocumentNode.SelectNodes("//table[@id='work_outline']//tr");        if (rows == null) return;        foreach (var tr in rows)        {            var th = tr.SelectSingleNode(".//th");            var td = tr.SelectSingleNode(".//td");            if (th == null || td == null) continue;            var roleRaw = TextNormalizer.Clean(th.InnerText);            if (string.IsNullOrWhiteSpace(roleRaw)) continue;            // Use MapStaffRole to check if this is a personnel-related role            var (mappedType, _) = MapStaffRole(roleRaw);            // If mapped type equals original role, it's not a recognized personnel role            if (mappedType.Equals(roleRaw, StringComparison.OrdinalIgnoreCase))                continue;            // Extract person names (prefer from links, fallback to cell text)            var nameNodes = td.SelectNodes(".//a");            var names = nameNodes?.Select(x => TextNormalizer.Clean(x.InnerText))                .Where(s => !string.IsNullOrEmpty(s))                .ToList()                ?? new List<string> { TextNormalizer.Clean(td.InnerText) };            // Add personnel information: Type = normalized English role, Role = original Japanese role            foreach (var name in names)            {                if (!string.IsNullOrWhiteSpace(name))                {                    AddPerson(meta, name, mappedType, roleRaw);                }            }        }    }    /// <summary>    /// Adds a person with automatic role mapping from original Japanese role name.    /// Convenience method that combines role validation, mapping, and person addition in one step.    /// </summary>    /// <param name="meta">Metadata object to add person to</param>    /// <param name="name">Person's name in original language</param>    /// <param name="originalRoleJapanese">Original Japanese role name for mapping</param>    /// <remarks>    /// This method provides a simplified interface for adding personnel when you have    /// the original Japanese role name and want automatic mapping to English types.    /// It validates that the role can be mapped before adding to avoid unrecognized entries.    /// </remarks>    /// <example>    /// // Add voice actor using Japanese role (automatically mapped to "Actor")    /// AddPersonWithOriginalRole(metadata, "田中花音", "声優");    ///    /// // Add director using Japanese role (automatically mapped to "Director")    /// AddPersonWithOriginalRole(metadata, "佐藤監督", "監督");    ///    /// // Add writer using Japanese role (automatically mapped to "Writer")    /// AddPersonWithOriginalRole(metadata, "脚本太郎", "シナリオ");    ///    /// // Skip unrecognized roles (will not be added)    /// AddPersonWithOriginalRole(metadata, "Unknown Person", "UnknownRole");    /// // Will be skipped since "UnknownRole" doesn't map to a standard type    ///    /// // Handle empty or null values gracefully    /// AddPersonWithOriginalRole(metadata, "", "声優"); // Skipped - empty name    /// AddPersonWithOriginalRole(metadata, "Name", ""); // Skipped - empty role    /// </example>    public static void AddPersonWithOriginalRole(Metadata meta, string name, string originalRoleJapanese)    {        if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(originalRoleJapanese))            return;        var (normalizedType, _) = MapStaffRole(originalRoleJapanese);        // If mapped type equals original role, it's not a recognized personnel role - skip        if (normalizedType.Equals(originalRoleJapanese, StringComparison.OrdinalIgnoreCase))            return;        AddPerson(meta, name, normalizedType, originalRoleJapanese);    }}