using System.Text.RegularExpressions;namespace ScraperBackendService.Core.Parsing;/// <summary>/// Advanced options for rich text extraction from HTML content./// Provides comprehensive configuration for text processing, filtering, and formatting./// Default settings aim to be safe and universally applicable across different content types./// </summary>public sealed class RichTextOptions{    /// <summary>    /// Whether to preserve line breaks; when false, line breaks are collapsed to spaces.    /// Useful for maintaining paragraph structure in extracted text.    /// </summary>    public bool KeepNewLines { get; init; } = true;    /// <summary>    /// Whether to preserve completely empty lines (e.g., empty lines produced by p &lt;br&gt;).    /// When false, consecutive line breaks are reduced to prevent excessive whitespace.    /// </summary>    public bool PreserveEmptyLines { get; init; } = false;    /// <summary>    /// Whether to render lists (add bullet points before ul/ol li items).    /// Converts HTML list items to text with appropriate bullet prefixes.    /// </summary>    public bool RenderLists { get; init; } = true;    /// <summary>    /// Prefix symbol for list items when RenderLists is enabled.    /// Customizable bullet character for list formatting.    /// </summary>    public string Bullet { get; init; } = "• ";    /// <summary>    /// Maximum number of paragraphs (null means no limit).    /// Limits the output to prevent excessively long descriptions.    /// </summary>    public int? MaxParagraphs { get; init; }    /// <summary>    /// Maximum number of characters (null means no limit).     /// When exceeded, ellipsis "…" will be appended to indicate truncation.    /// </summary>    public int? MaxChars { get; init; }    /// <summary>    /// Paragraphs containing these keywords will be filtered out (case insensitive).    /// Useful for removing unwanted content like advertisements or disclaimers.    /// </summary>    public List<string> ExcludeContains { get; } = new();    /// <summary>    /// Paragraphs matching these regex patterns will be filtered out.    /// Provides advanced filtering capabilities for complex content exclusion.    /// </summary>    public List<Regex> ExcludeRegex { get; } = new();    /// <summary>    /// Allows custom post-processing after final concatenation.    /// Enables additional text transformations after standard processing is complete.    /// </summary>    public Func<string, string>? PostProcess { get; init; }    /// <summary>    /// Default options instance with sensible settings for most use cases.    /// Provides a ready-to-use configuration for standard text extraction.    /// </summary>    public static RichTextOptions Default { get; } = new();}