using ScraperBackendService.Models;namespace ScraperBackendService.Core.Util;/// <summary>/// Unified test result display utilities for metadata and search results formatting./// Provides comprehensive display methods for testing and debugging scraper output./// </summary>public static class TestDisplayUtils{    /// <summary>    /// Display detailed metadata information with comprehensive field breakdown.    /// Shows all available metadata fields with visual indicators for missing data.    /// </summary>    /// <param name="meta">Metadata object to display</param>    /// <param name="index">Result index number for identification</param>    /// <example>    /// DisplayDetailedMetadata(metadata, 1);    /// // Outputs formatted metadata with emojis and field labels    /// </example>    public static void DisplayDetailedMetadata(Metadata meta, int index)    {        Console.WriteLine($"üìã Result #{index}:");        Console.WriteLine($"   üè∑Ô∏è  ID: {meta.ID ?? "‚ùåEmpty"}");        Console.WriteLine($"   üìù Title: {meta.Title ?? "‚ùåEmpty"}");        if (!string.IsNullOrWhiteSpace(meta.OriginalTitle) && meta.OriginalTitle != meta.Title)            Console.WriteLine($"   üìù Original Title: {meta.OriginalTitle}");        if (!string.IsNullOrWhiteSpace(meta.Description))        {            var desc = meta.Description.Length > 100                ? meta.Description[..100] + "..."                : meta.Description;            Console.WriteLine($"   üìÑ Description: {desc}");        }        else        {            Console.WriteLine($"   üìÑ Description: ‚ùåEmpty");        }        Console.WriteLine($"   ‚≠ê Rating: {(meta.Rating.HasValue ? $"{meta.Rating:F1}/5.0" : "‚ùåEmpty")}");        if (meta.ReleaseDate.HasValue)            Console.WriteLine($"   üìÖ Release Date: {meta.ReleaseDate.Value:yyyy-MM-dd}");        else            Console.WriteLine($"   üìÖ Release Date: ‚ùåEmpty");        if (meta.Year.HasValue)            Console.WriteLine($"   üìÖ Year: {meta.Year}");        // Studios        if (meta.Studios.Count > 0)            Console.WriteLine($"   üè¢ Studios: {string.Join(", ", meta.Studios)}");        else            Console.WriteLine($"   üè¢ Studios: ‚ùåEmpty");        // Series        if (meta.Series.Count > 0)            Console.WriteLine($"   üìö Series: {string.Join(", ", meta.Series)}");        else            Console.WriteLine($"   üìö Series: ‚ùåEmpty");        // Tags/Genres        if (meta.Genres.Count > 0)            Console.WriteLine($"   üè∑Ô∏è  Tags: {string.Join(", ", meta.Genres)}");        else            Console.WriteLine($"   üè∑Ô∏è  Tags: ‚ùåEmpty");        // People        if (meta.People.Count > 0)        {            Console.WriteLine($"   üë• People ({meta.People.Count}):");            foreach (var person in meta.People.Take(5)) // Show only first 5            {                var roleInfo = !string.IsNullOrWhiteSpace(person.Role) ? $" ({person.Role})" : "";                Console.WriteLine($"      ‚Ä¢ {person.Name} - {person.Type}{roleInfo}");            }            if (meta.People.Count > 5)                Console.WriteLine($"      ... and {meta.People.Count - 5} more");        }        else        {            Console.WriteLine($"   üë• People: ‚ùåEmpty");        }        // Images - Detailed display        DisplayImageDetails(meta);        // Source URLs        if (meta.SourceUrls.Count > 0)            Console.WriteLine($"   üîó Source URLs: {string.Join(", ", meta.SourceUrls)}");        else            Console.WriteLine($"   üîó Source URLs: ‚ùåEmpty");    }    /// <summary>    /// Display detailed image information with URL truncation for readability.    /// Shows primary, backdrop, and thumbnail images with counts and summaries.    /// </summary>    /// <param name="meta">Metadata containing image information</param>    private static void DisplayImageDetails(Metadata meta)    {        var hasAnyImage = !string.IsNullOrWhiteSpace(meta.Primary) ||                         !string.IsNullOrWhiteSpace(meta.Backdrop) ||                         meta.Thumbnails.Count > 0;        if (!hasAnyImage)        {            Console.WriteLine($"   üñºÔ∏è  Images: ‚ùåNo images found");            return;        }        Console.WriteLine($"   üñºÔ∏è  Images Found:");        // Primary Image        if (!string.IsNullOrWhiteSpace(meta.Primary))        {            Console.WriteLine($"      üéØ Primary: {TruncateUrl(meta.Primary)}");        }        // Backdrop Image        if (!string.IsNullOrWhiteSpace(meta.Backdrop))        {            Console.WriteLine($"      üåÑ Backdrop: {TruncateUrl(meta.Backdrop)}");        }        // Thumbnails        if (meta.Thumbnails.Count > 0)        {            Console.WriteLine($"      üì∏ Thumbnails ({meta.Thumbnails.Count}):");            for (int i = 0; i < Math.Min(meta.Thumbnails.Count, 10); i++) // Show max 10 thumbnails            {                Console.WriteLine($"         [{i + 1:D2}] {TruncateUrl(meta.Thumbnails[i])}");            }            if (meta.Thumbnails.Count > 10)            {                Console.WriteLine($"         ... and {meta.Thumbnails.Count - 10} more thumbnails");            }        }        // Summary        var totalImages = (string.IsNullOrWhiteSpace(meta.Primary) ? 0 : 1) +                         (string.IsNullOrWhiteSpace(meta.Backdrop) ? 0 : 1) +                         meta.Thumbnails.Count;        Console.WriteLine($"      üìä Total Images: {totalImages}");    }    /// <summary>    /// Truncate long URLs for display while preserving filename when possible.    /// Intelligently shortens URLs to maintain readability in console output.    /// </summary>    /// <param name="url">URL to truncate</param>    /// <param name="maxLength">Maximum length for display</param>    /// <returns>Truncated URL string</returns>    private static string TruncateUrl(string url, int maxLength = 100)    {        if (string.IsNullOrWhiteSpace(url)) return "‚ùåEmpty";        if (url.Length <= maxLength) return url;        // Try to keep the filename visible        var lastSlash = url.LastIndexOf('/');        if (lastSlash > 0 && url.Length - lastSlash < maxLength / 2)        {            var prefixLength = maxLength - (url.Length - lastSlash) - 3; // 3 for "..."            if (prefixLength > 10)            {                return url[..prefixLength] + "..." + url[lastSlash..];            }        }        // Fallback: simple truncation        return url[..(maxLength - 3)] + "...";    }    /// <summary>    /// Display simplified metadata information with basic image info.    /// Provides a concise overview suitable for batch result display.    /// </summary>    /// <param name="meta">Metadata object to display</param>    /// <example>    /// DisplaySimpleMetadata(metadata);    /// // Outputs: title, description (truncated), tags, image count, URL    /// </example>    public static void DisplaySimpleMetadata(Metadata meta)    {        Console.WriteLine($"- ID: {meta.ID}");        Console.WriteLine($"  Title: {(string.IsNullOrWhiteSpace(meta.Title) ? "‚ùåEmpty" : meta.Title)}");        if (!string.IsNullOrWhiteSpace(meta.Description))        {            var desc = meta.Description.Length > 60 ? meta.Description[..60] + "..." : meta.Description;            Console.WriteLine($"  Description: {desc}");        }        else        {            Console.WriteLine($"  Description: ‚ùåEmpty");        }        Console.WriteLine($"  Tags: {(meta.Genres?.Count > 0 ? string.Join(", ", meta.Genres) : "‚ùåEmpty")}");        // Add image count summary        var imageCount = (string.IsNullOrWhiteSpace(meta.Primary) ? 0 : 1) +                        (string.IsNullOrWhiteSpace(meta.Backdrop) ? 0 : 1) +                        meta.Thumbnails.Count;        Console.WriteLine($"  Images: {(imageCount > 0 ? $"‚úÖ{imageCount} found" : "‚ùåNone")}");        Console.WriteLine($"  URL: {string.Join(", ", meta.SourceUrls)}");        Console.WriteLine();    }    /// <summary>    /// Display test result summary with performance metrics.    /// Shows test completion statistics and timing information.    /// </summary>    /// <param name="provider">Provider name being tested</param>    /// <param name="input">Search input used</param>    /// <param name="resultCount">Number of results returned</param>    /// <param name="elapsed">Time taken for operation</param>    public static void DisplayTestSummary(string provider, string input, int resultCount, TimeSpan elapsed)    {        Console.WriteLine($"üìä Test Summary - {provider}");        Console.WriteLine($"   üîç Search Term: {input}");        Console.WriteLine($"   üìã Result Count: {resultCount}");        Console.WriteLine($"   ‚è±Ô∏è Duration: {elapsed.TotalSeconds:F1} seconds");    }    /// <summary>    /// Display error information with exception details.    /// Shows primary exception message and inner exception if available.    /// </summary>    /// <param name="operation">Name of the operation that failed</param>    /// <param name="ex">Exception that occurred</param>    public static void DisplayError(string operation, Exception ex)    {        Console.WriteLine($"‚ùå {operation} failed: {ex.Message}");        if (ex.InnerException != null)            Console.WriteLine($"   Inner exception: {ex.InnerException.Message}");    }    /// <summary>    /// Display separator line for visual organization.    /// Creates a line of specified character and length for output formatting.    /// </summary>    /// <param name="character">Character to use for the line</param>    /// <param name="length">Length of the separator line</param>    public static void DisplaySeparator(char character = '=', int length = 80)    {        Console.WriteLine("".PadRight(length, character));    }    /// <summary>    /// Display progress information for long-running operations.    /// Shows current progress with percentage completion.    /// </summary>    /// <param name="operation">Name of the operation in progress</param>    /// <param name="current">Current item number</param>    /// <param name="total">Total number of items</param>    public static void DisplayProgress(string operation, int current, int total)    {        var percentage = (double)current / total * 100;        Console.WriteLine($"üîÑ {operation}: {current}/{total} ({percentage:F0}%)");    }}